{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/cs-basic/",
    "result": {"data":{"logo":null,"markdownRemark":{"html":"<h2>Basic Computer System</h2>\n<p>※ 본 포스팅의 내용은 <code class=\"language-text\">고성능 파이썬 (High Performance Python)</code> 책을 읽고 공부한 내용을 기록한 포스트입니다.</p>\n<ul>\n<li>컴퓨터를 구성하는 3 요소\n<ul>\n<li>연산 장치 (CPU) => 초당 얼마나 많이 계산 가능한지</li>\n<li>메모리 장치 (RAM, Hard-Drive) => 데이터를 얼마나 많이 저장할 수 있으며, 얼마나 빠르게 읽고 쓸 수 있는지</li>\n<li>연결 장치 (BUS) => 장치 간에 데이터를 얼마나 빠르게 옮길 수 있는지</li>\n</ul>\n</li>\n</ul>\n<h3>연산 장치</h3>\n<p>컴퓨터의 가장 핵심적인 장치로 입력되 bit를 다른 bit로 변환하거나 프로세스 상태를 변경하는 기능을 제공한다.\n일반적인 연산 장치는 CPU지만 최근에는 인공지능 모델 학습에 잘 쓰이는 GPU가 인기를 끌고 있다. 연산 장치 성능의 핵심은 한 사이클에 처리할 수 있는 연산의 개수와 1초에\n처리할 수 있는 사이클의 횟수이다. 한 사이클에 처리할 수 있는 연산의 개수는 **IPC(Instructions Per Cycle)**로 측정하고,\n초당 사이클 횟수는 <strong>클럭 속도</strong>로 측정한다.</p>\n<p>이 두 개념은 CPU의 주 성능 지표이다. 어떤 CPU는 IPC 값이 높지만 클럭 속도가 느리고, 어떤 CPU는 반대인 경우도 있으며,\nGPU는 클럭 속도가 빠르고 IPC 값도 크지만 다른 문제에서 병목 현상이 발생한다.</p>\n<p>클럭 속도를 높이면 초당 연산량이 증가하므로 모든 프로그램의 속도가 개선되며, IPC 값이 높아지면 <strong>벡터화</strong> 수준이 증가하므로\n처리 성능이 올라간다. 벡터화는 CPU가 여러 데이터를 입력받아 한 번에 처리할 때 발생하는데, 이런 명령을 **SIMD(Single Instruction Multiple Data)**라고 한다.</p>\n<h3>연산 장치 관련 기술</h3>\n<ul>\n<li>Hyperthreading\n<ul>\n<li>OS에 가상의 두 번째 CPU를 인식시키고 단일 CPU의 실행 유닛에 두 스레드를 번갈아 가며 실행하도록 하는 기법</li>\n<li>단일 스레드 대비 30%까지 성능을 끌어올릴 수 있음</li>\n<li>두 스레드가 서로 다른 실행 유닛을 사용할 때 (Ex-한 스레드는 실수 연산, 다른 스레드는 정수 연산을 할 때) 잘 작동</li>\n</ul>\n</li>\n<li>비순차적 명령어 처리 (Out-of-order Execution) - Pipeline\n<ul>\n<li>이전 작업의 결과에 영향을 받지 않는 부분을 찾아내서 두 작업을 순서와 관계없이 실행하거나 동시에 실행하는 기법</li>\n<li>순서에 관계가 있는 경우 기다렸다가 처리하는 등의 로직이 섞여 있음</li>\n<li>사용 가능한 자원을 최대한 활용함으로써 처리 속도를 상승시킴</li>\n</ul>\n</li>\n<li>멀티 코어 아키텍처\n<ul>\n<li>실행 유닛 하나에 CPU를 여러 개 사용하는 기법</li>\n<li>암달의 법칙(Amdahl’s Law): 멀티 코어에서 작동하도록 설계된 프로그램이더라도 하나의 코어에서 실행해야 되는 부분이 존재하므로,\n이 루틴이 코어를 더 투입하더라도 성능이 더 좋아지지 않는 병목으로 작용한다는 법칙이다.</li>\n<li>파이썬에서는 GIL(Global Interpreter Lock) 때문에 코어를 여러 개 활용하기 쉽지 않음. GIL은 한 번에 명령 하나만 실행하도록 강제하는 파이썬 고유의 인터프리터 법칙으로\n다수의 코어를 사용하더라도 한 번에 명령 하나만 처리하기 때문에 멀티 코어를 사용하는 장점이 사라진다.</li>\n<li>멀티 코어를 사용하기 위해서는 파이썬 내장 라이브러리인 multiprocessing 혹은 ray, numpy or numexpr, cython 등을 사용할 수 있음</li>\n</ul>\n</li>\n</ul>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Basic Computer System"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"※ 본 포스팅의 내용은 "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"고성능 파이썬 (High Performance Python)"}]},{"type":"text","value":" 책을 읽고 공부한 내용을 기록한 포스트입니다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"컴퓨터를 구성하는 3 요소\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"연산 장치 (CPU) => 초당 얼마나 많이 계산 가능한지"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"메모리 장치 (RAM, Hard-Drive) => 데이터를 얼마나 많이 저장할 수 있으며, 얼마나 빠르게 읽고 쓸 수 있는지"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"연결 장치 (BUS) => 장치 간에 데이터를 얼마나 빠르게 옮길 수 있는지"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"연산 장치"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"컴퓨터의 가장 핵심적인 장치로 입력되 bit를 다른 bit로 변환하거나 프로세스 상태를 변경하는 기능을 제공한다.\n일반적인 연산 장치는 CPU지만 최근에는 인공지능 모델 학습에 잘 쓰이는 GPU가 인기를 끌고 있다. 연산 장치 성능의 핵심은 한 사이클에 처리할 수 있는 연산의 개수와 1초에\n처리할 수 있는 사이클의 횟수이다. 한 사이클에 처리할 수 있는 연산의 개수는 **IPC(Instructions Per Cycle)**로 측정하고,\n초당 사이클 횟수는 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"클럭 속도"}]},{"type":"text","value":"로 측정한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"이 두 개념은 CPU의 주 성능 지표이다. 어떤 CPU는 IPC 값이 높지만 클럭 속도가 느리고, 어떤 CPU는 반대인 경우도 있으며,\nGPU는 클럭 속도가 빠르고 IPC 값도 크지만 다른 문제에서 병목 현상이 발생한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"클럭 속도를 높이면 초당 연산량이 증가하므로 모든 프로그램의 속도가 개선되며, IPC 값이 높아지면 "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"벡터화"}]},{"type":"text","value":" 수준이 증가하므로\n처리 성능이 올라간다. 벡터화는 CPU가 여러 데이터를 입력받아 한 번에 처리할 때 발생하는데, 이런 명령을 **SIMD(Single Instruction Multiple Data)**라고 한다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"연산 장치 관련 기술"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Hyperthreading\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"OS에 가상의 두 번째 CPU를 인식시키고 단일 CPU의 실행 유닛에 두 스레드를 번갈아 가며 실행하도록 하는 기법"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"단일 스레드 대비 30%까지 성능을 끌어올릴 수 있음"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"두 스레드가 서로 다른 실행 유닛을 사용할 때 (Ex-한 스레드는 실수 연산, 다른 스레드는 정수 연산을 할 때) 잘 작동"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"비순차적 명령어 처리 (Out-of-order Execution) - Pipeline\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"이전 작업의 결과에 영향을 받지 않는 부분을 찾아내서 두 작업을 순서와 관계없이 실행하거나 동시에 실행하는 기법"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"순서에 관계가 있는 경우 기다렸다가 처리하는 등의 로직이 섞여 있음"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"사용 가능한 자원을 최대한 활용함으로써 처리 속도를 상승시킴"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"멀티 코어 아키텍처\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"실행 유닛 하나에 CPU를 여러 개 사용하는 기법"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"암달의 법칙(Amdahl’s Law): 멀티 코어에서 작동하도록 설계된 프로그램이더라도 하나의 코어에서 실행해야 되는 부분이 존재하므로,\n이 루틴이 코어를 더 투입하더라도 성능이 더 좋아지지 않는 병목으로 작용한다는 법칙이다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"파이썬에서는 GIL(Global Interpreter Lock) 때문에 코어를 여러 개 활용하기 쉽지 않음. GIL은 한 번에 명령 하나만 실행하도록 강제하는 파이썬 고유의 인터프리터 법칙으로\n다수의 코어를 사용하더라도 한 번에 명령 하나만 처리하기 때문에 멀티 코어를 사용하는 장점이 사라진다."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"멀티 코어를 사용하기 위해서는 파이썬 내장 라이브러리인 multiprocessing 혹은 ray, numpy or numexpr, cython 등을 사용할 수 있음"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"excerpt":"Basic Computer System ※ 본 포스팅의 내용은  책을 읽고 공부한 내용을 기록한 포스트입니다. 컴퓨터를 구성하는 3 요소 연산 장치 (CPU) => 초당 얼마나 많이 계산 가능한지 메모리 장치 (RAM, Hard-Drive…","fields":{"readingTime":{"text":"5 min read"}},"frontmatter":{"title":"Basic Computer System - 연산 장치","userDate":"4 January 2022","date":"2022-01-04T10:00:00.000Z","tags":["cs"],"excerpt":null,"image":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#085878","images":{"fallback":{"src":"/static/701ec19008a764b7dd4bccbc63d2efdc/ef255/computer_architecture.png","srcSet":"/static/701ec19008a764b7dd4bccbc63d2efdc/76a4f/computer_architecture.png 750w,\n/static/701ec19008a764b7dd4bccbc63d2efdc/a902f/computer_architecture.png 1080w,\n/static/701ec19008a764b7dd4bccbc63d2efdc/61156/computer_architecture.png 1366w,\n/static/701ec19008a764b7dd4bccbc63d2efdc/ef255/computer_architecture.png 1592w","sizes":"100vw"},"sources":[{"srcSet":"/static/701ec19008a764b7dd4bccbc63d2efdc/66907/computer_architecture.webp 750w,\n/static/701ec19008a764b7dd4bccbc63d2efdc/27610/computer_architecture.webp 1080w,\n/static/701ec19008a764b7dd4bccbc63d2efdc/90004/computer_architecture.webp 1366w,\n/static/701ec19008a764b7dd4bccbc63d2efdc/0d756/computer_architecture.webp 1592w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.75}}},"author":[]}},"relatedPosts":{"totalCount":2,"edges":[{"node":{"id":"2ed8f761-84fe-56e0-a5de-06cd3a43915f","excerpt":"Basic Computer System ※ 본 포스팅의 내용은  책을 읽고 공부한 내용을 기록한 포스트입니다. 컴퓨터를 구성하는 3 요소 연산 장치 (CPU) => 초당 얼마나 많이 계산 가능한지 메모리 장치 (RAM, Hard-Drive…","frontmatter":{"title":"Basic Computer System - 연산 장치","date":"2022-01-04T10:00:00.000Z"},"fields":{"readingTime":{"text":"5 min read"},"slug":"/cs-basic/"}}},{"node":{"id":"edf89203-13a6-5598-ae43-72793efba19e","excerpt":"Computer Architecture Review 오랜만에 컴퓨터 구조에서 배운 내용을 조금 복습해보며 감을 잡기 위함 컴퓨터가 코드를 처리하는 과정 Read Code Assembly 변환 CPU에서 실행 CPU에서 하나의 명령(Ex) Add…","frontmatter":{"title":"Computer Architecture Review","date":"2021-02-05T10:00:00.000Z"},"fields":{"readingTime":{"text":"2 min read"},"slug":"/computer-ar-review/"}}}]}},"pageContext":{"slug":"/cs-basic/","prev":{"excerpt":"고성능 파이썬 (High Performance Python) 신년 첫 개발 서적으로 고성능 파이썬 (High Performance Python…","frontmatter":{"title":"고성능 파이썬 (High Performance Python)","tags":["book","review"],"date":"2022-01-03T10:00:00.000Z","draft":false,"excerpt":null,"image":null,"author":[]},"fields":{"readingTime":{"text":"2 min read"},"layout":"","slug":"/highperformance-python/"}},"next":{"excerpt":"Generation with Retrieval 이번에 딥마인드에서 RETRO(Retrieval-Enhanced Transformer) 라는 모델을 내놓았습니다. 문서 retrieval + GPT 기반 모델인데,\n7B 모델임에도 불구하고 2…","frontmatter":{"title":"Generation with Retrieval","tags":["nlp","paper"],"date":"2022-01-04T23:00:00.000Z","draft":false,"excerpt":null,"image":null,"author":[]},"fields":{"readingTime":{"text":"6 min read"},"layout":"","slug":"/fid_and_rag/"}},"primaryTag":"cs"}},
    "staticQueryHashes": ["3170763342","3229353822"]}